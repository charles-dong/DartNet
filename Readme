DartNet is a custom networking stack that implements the basic features of TCP/IP. 

DartNet's transport layer implements basic features of TCP such as three-way handshake, connection states, ordered data transfer, retransmission of lost packets, data integrity assurance, and flow control.

DartNet's link layer implements basic features of IP such as datagram construction, network topology detection, and packet routing.

Since we cannot overwrite real TCP/IP code, DartNet is implemented as virtual layers just below the application layer. On top of TCP/IP, it maintains its own network topology information, simulates packet loss and corruption, and provides an API for programs to send data over it.


BUILDING AND RUNNING:

Use make to compile. 
To run the application:
1, start the overlay processes:
	At each node, goto overlay directory: run ./overlay&
	The overlay processes on 4 nodes should be started within 1 min.
	wait until you see: waiting connection from network layer on all the nodes.
2. start the network processes: 
	At each node, goto network directory: run ./network&
	wait until you see: waiting for connection from SRT process on all the nodes.
3. start the transport processes and run the application:
	AT one node, goto server dicrectory: run ./app_simple_app or ./app_stress_app
	At another node, goto client directory: run ./app_simple_app or ./app_stress_app

To stop the program:
use kill -s 2 processID to kill the network processes and overlay processes

If the port numbers used by the program are used already, the program exits.
